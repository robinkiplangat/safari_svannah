# -*- coding: utf-8 -*-
"""Svannah-MultiAgent_Crew.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1--ExzC2ZQiydsJgSyh9LfeSuW2KnsqEi

# AI Real Estate Agent System
Multi-agent system for property search and analysis
"""

!pip install crewai==0.28.8 langchain_community==0.0.29 firecrawl-py 'crewai[tools]'

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive/')

# %cd '/content/drive/MyDrive/Colab Notebooks/Agents/realEstate'

# Warning control
import warnings
warnings.filterwarnings('ignore')

"""Import your staff :) & tools"""

from crewai import Agent, Task, Crew

from crewai import Agent, Task, Crew
from crewai_tools import ScrapeWebsiteTool
from pydantic import BaseModel, Field
from typing import List, Dict, Optional
from firecrawl import FirecrawlApp
import os

"""## Configure API Keys"""

import os
# from utils import get_openai_api_key
from google.colab import userdata


# openai_api_key = get_openai_api_key()

os.environ["OPENAI_MODEL_NAME"] = 'gpt-3.5-turbo'

os.environ["OPENAI_API_KEY"] = userdata.get('OPENAI_API_KEY')
os.environ["FIRECRAWL_API_KEY"] = userdata.get('FIRECRAWL_API_KEY')

"""## Define Agents

### Property Researcher Agent
"""

property_researcher = Agent(
    role="Senior Property Researcher",
    goal="Find and extract relevant property listings based on user criteria",
    backstory="An expert in web scraping and real estate data extraction with "
              "years of experience in aggregating property data from multiple sources. "
              "Known for accurate and comprehensive data collection.",
    verbose=True,
    allow_delegation=False
)

"""### Market Analyst Agent"""

market_analyst = Agent(
    role="Real Estate Market Analyst",
    goal="Analyze property data and identify best investment opportunities",
    backstory="A seasoned analyst with deep understanding of real estate markets "
              "and valuation techniques. Specializes in comparative market analysis "
              "and investment potential assessment.",
    verbose=True,
    allow_delegation=False
)

"""### Location Trends Agent"""

location_analyst = Agent(
    role="Location Intelligence Specialist",
    goal="Analyze location-based price trends and market dynamics",
    backstory="An urban economist with expertise in geographic market trends "
              "and neighborhood valuation patterns. Combines GIS data with "
              "market intelligence for accurate predictions.",
    verbose=True,
    allow_delegation=False
)

"""### Report Editor Agent"""

report_editor = Agent(
    role="Senior Real Estate Editor",
    goal="Compile analysis into professional reports",
    backstory="A former property journalist with exceptional skills in structuring "
              "complex data into clear, actionable insights. Ensures reports are "
              "accurate and client-ready.",
    verbose=True,
    allow_delegation=False
)

"""## Define Tasks

### Property Search Task
"""

# Define the PropertyUrls model
class PropertyUrls(BaseModel):
    urls: List[str] = Field(..., description="List of formatted URLs to scrape based on location")

# Define the PropertyData model
class PropertyData(BaseModel):
    """
    Model to represent data for a single property.
    """
    title: str
    location: str
    price: Optional[str] = None  # Price might be missing
    features: Optional[List[str]] = None  # Features might be missing
    # Add more fields as needed

property_urls=[
    "https://www.knightfrank.com/property-for-sale/kenya",
    "https://www.buyrentkenya.com/property-for-sale",
    "https://www.pamgolding.co.za/property-search/properties-for-sale-kenya/119"
    ]

# Update Property Search Task
property_search_task = Task(
    description=(
        "Search for {property_type} properties in {city} "
        "under {max_price} from these sources: {property_urls}"
        "Focus only on properties matching the exact criteria."
    ),
    expected_output="Structured JSON data of 5-10 relevant properties with "
                   "complete details including price, location, and features and a link to the property.",
    agent=property_researcher,
    tools=[ScrapeWebsiteTool()],
    output_json=PropertyData,

)

"""### Market Analysis Task"""

market_analysis_task = Task(
    description=("Analyze {property_count} properties in {city} "
                 "and identify top 5 investment opportunities"),
    expected_output="Comparative analysis report highlighting price-value ratios, "
                   "future appreciation potential, and risk factors.",
    agent=market_analyst
)

"""### Location Analysis Task"""

location_analysis_task = Task(
    description="Analyze price trends and neighborhood dynamics for {city}",
    expected_output="Report detailing price per sqft trends, rental yields, "
                   "and emerging hotspots in different localities.",
    agent=location_analyst
)

"""### Report Compilation Task"""

report_task = Task(
    description="Compile all analyses into final client-ready report",
    expected_output="Well-structured markdown report with sections for property "
                   "recommendations, market analysis, and location insights."
                   "For Potential Buyers, add a Negotiation Plan / Checks",
    agent=report_editor
)

"""## Create Crew"""

real_estate_crew = Crew(
    agents=[
        property_researcher,
        market_analyst,
        location_analyst,
        report_editor
    ],
    tasks=[
        property_search_task,
        market_analysis_task,
        location_analysis_task,
        report_task
    ],
    verbose=2
)

"""## Execute Crew"""

inputs = {
    "city": "Nairobi",
    "property_type": "Residential Flats",
    "max_price": "50,000",
    "property_count": 8,
    "property_urls": property_urls # Add the property_urls variable to the inputs dictionary

}

"""## Display Results"""

# The execution remains the same
result = real_estate_crew.kickoff(inputs=inputs)

from IPython.display import Markdown
Markdown(result)

inputs_ksm = {
    "city": "Kisumu",
    "property_type": "Land",
    "max_price": "10,000,000",
    "property_count": 8,
    "property_urls": property_urls # Add the property_urls variable to the inputs dictionary

}

# The execution remains the same
result = real_estate_crew.kickoff(inputs=inputs_ksm)

from IPython.display import Markdown
Markdown(result)

inputs_Msa = {
    "city": "Nairobi",
    "property_type": "Houses",
    "max_price": "15,000,000",
    "property_count": 8,
    "property_urls": property_urls # Add the property_urls variable to the inputs dictionary

}

# The execution remains the same
result = real_estate_crew.kickoff(inputs=inputs_Msa)

from IPython.display import Markdown
Markdown(result)